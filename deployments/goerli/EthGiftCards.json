{
  "address": "0xdCbAE20055FF9D9A414a67C18EA2b3fcba3d6180",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "themes_",
          "type": "string[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "themes_",
          "type": "string[]"
        }
      ],
      "name": "addThemes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "cards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "theme",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "ens",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastThemeId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[6]",
          "name": "note_",
          "type": "string[6]"
        },
        {
          "internalType": "uint32",
          "name": "theme_",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "firstOwner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "ensPrefix_",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "ensPrefix_",
          "type": "string"
        }
      ],
      "name": "resolve",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "themes",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xc0d4b70fda781732257068f0145bf793d9936e9d6ff94118523b1899375c9359",
  "receipt": {
    "to": null,
    "from": "0x4B5BaD436CcA8df3bD39A095b84991fAc9A226F1",
    "contractAddress": "0xdCbAE20055FF9D9A414a67C18EA2b3fcba3d6180",
    "transactionIndex": 2,
    "gasUsed": "4178559",
    "logsBloom": "0x
    "blockHash": "0xf8cea0925bcc6523277b56f696a71832933145e92a42af1cb9e703bd1af40df1",
    "transactionHash": "0xc0d4b70fda781732257068f0145bf793d9936e9d6ff94118523b1899375c9359",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 5647506,
        "transactionHash": "0xc0d4b70fda781732257068f0145bf793d9936e9d6ff94118523b1899375c9359",
        "address": "0xdCbAE20055FF9D9A414a67C18EA2b3fcba3d6180",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004b5bad436cca8df3bd39a095b84991fac9a226f1"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xf8cea0925bcc6523277b56f696a71832933145e92a42af1cb9e703bd1af40df1"
      }
    ],
    "blockNumber": 5647506,
    "cumulativeGasUsed": "4291230",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Eth Gift Cards",
    "NF-ETH",
    [
      "<svg xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 350 350\"><style>.base { fill: green; font-family: courier; font-size: 11px; }</style><rect width=\"100%\" height=\"100%\" fill=\"pink\" /><text x=\"10\" y=\"20\" class=\"base\">value: ",
      "<svg xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 350 350\"><style>.base { fill: #d7d9ce; font-family: courier; font-size: 11px; }</style><rect width=\"100%\" height=\"100%\" fill=\"#0c7489\" /><text x=\"10\" y=\"20\" class=\"base\">value: ",
      "<svg xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 350 350\"><style>.base { fill: #19231a; font-family: courier; font-size: 11px; }</style><rect width=\"100%\" height=\"100%\" fill=\"#33673b\" /><text x=\"10\" y=\"20\" class=\"base\">value: ",
      "<svg xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 350 350\"><style>.base { fill: white; font-family: courier; font-size: 11px; }</style><rect width=\"100%\" height=\"100%\" fill=\"black\" /><text x=\"10\" y=\"20\" class=\"base\">value: "
    ]
  ],
  "solcInputHash": "32fc8e2e79c43f41e1b7a0e26d7fa791",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"themes_\",\"type\":\"string[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"themes_\",\"type\":\"string[]\"}],\"name\":\"addThemes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"theme\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ens\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastThemeId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[6]\",\"name\":\"note_\",\"type\":\"string[6]\"},{\"internalType\":\"uint32\",\"name\":\"theme_\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"firstOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"ensPrefix_\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ensPrefix_\",\"type\":\"string\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"themes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EthGiftCards.sol\":\"EthGiftCards\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41dc7bf7f69c668eb98aa078c5140a4d3c3b097124ee4b6058a649ca99688300\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\n/// @title Base64\\n/// @notice Provides a function for encoding some bytes in base64\\n/// @author Brecht Devos <brecht@loopring.org>\\nlibrary Base64 {\\n    bytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /// @notice Encodes some bytes to the base64 representation\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        uint256 len = data.length;\\n        if (len == 0) return \\\"\\\";\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n        // Add some extra buffer at the end\\n        bytes memory result = new bytes(encodedLen + 32);\\n\\n        bytes memory table = TABLE;\\n\\n        assembly {\\n            let tablePtr := add(table, 1)\\n            let resultPtr := add(result, 32)\\n\\n            for {\\n                let i := 0\\n            } lt(i, len) {\\n\\n            } {\\n                i := add(i, 3)\\n                let input := and(mload(add(data, i)), 0xffffff)\\n\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\n                out := shl(224, out)\\n\\n                mstore(resultPtr, out)\\n\\n                resultPtr := add(resultPtr, 4)\\n            }\\n\\n            switch mod(len, 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n\\n            mstore(result, encodedLen)\\n        }\\n\\n        return string(result);\\n    }\\n}\",\"keccak256\":\"0xced623ceed8347d38c75e2a1b46f311287a89e008318f92eadfc0e667780a38d\",\"license\":\"MIT\"},\"contracts/ENS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface IResolver {\\n    function addr(bytes32 node) external view returns (address);\\n}\\n\\ninterface IENS {\\n    function resolver(bytes32 node) external view returns (IResolver);\\n}\",\"keccak256\":\"0x87055e1b80b2c30fe98a50903741ee3ae040927e7758b9777c959df8c88a3997\",\"license\":\"MIT\"},\"contracts/EthGiftCards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport {\\n    ERC721,\\n    ERC721Enumerable\\n} from \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {IENS, IResolver} from \\\"./ENS.sol\\\";\\nimport \\\"./Base64.sol\\\";\\n\\n\\n// solhint-disable\\ncontract EthGiftCards is ERC721Enumerable, Ownable, ReentrancyGuard {\\n\\n    struct Card {\\n        uint256 value;\\n        uint256 theme;\\n        string ens;\\n        string[6] note;\\n        address issuer;\\n    }\\n\\n    bytes32 constant SUFFIX = keccak256(abi.encodePacked(bytes32(0), keccak256(bytes('eth'))));\\n\\n    uint256 public lastThemeId;\\n    uint256 public lastTokenId;\\n    mapping(uint256 => string) public themes;\\n    mapping(uint256 => Card) public cards;\\n    IENS private ens = IENS(0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e);\\n\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        string[] memory themes_\\n    ) ERC721(name_, symbol_) {\\n        addThemes(themes_);\\n    }\\n\\n    function addThemes(string[] memory themes_) public onlyOwner() {\\n        uint256 len = themes_.length;\\n        uint256 currentTotal = lastThemeId;\\n        for (uint256 i=0; i<len; i++) {\\n            themes[currentTotal+i+1] = themes_[i];\\n        }\\n        lastThemeId += len;\\n    }\\n\\n    function mint(string[6] memory note_, uint32 theme_, address firstOwner, string memory ensPrefix_) external payable nonReentrant() {\\n        require(msg.value > 0, 'no value');\\n        require(theme_ > 0 && theme_ <= lastThemeId, 'invalid theme');\\n        for (uint256 i=0; i<6; i++) {\\n            require(bytes(note_[i]).length <= 42, 'note line too long');\\n        }\\n        require(keccak256(bytes(ensPrefix_)) == keccak256(bytes(\\\"\\\")) || msg.sender==resolve(ensPrefix_), 'ens does not resolve');\\n        lastTokenId += 1;\\n        uint256 newTokenId = lastTokenId;\\n        cards[newTokenId] = Card({\\n            theme: theme_,\\n            note: note_,\\n            ens: ensPrefix_,\\n            issuer: msg.sender,\\n            value: msg.value\\n        });\\n        _safeMint(firstOwner, newTokenId);\\n    }\\n\\n    function burn(uint256 tokenId) external nonReentrant() {\\n        require(msg.sender == ownerOf(tokenId), \\\"caller not owner\\\");\\n        uint256 amount = cards[tokenId].value;\\n        delete cards[tokenId];\\n        _burn(tokenId);\\n        (bool sent, ) = msg.sender.call{value: amount}(\\\"\\\");\\n        require(sent, \\\"failed to send eth\\\");\\n    }\\n\\n    function resolve(string memory ensPrefix_) public view returns(address) {\\n        bytes32 node = keccak256(abi.encodePacked(SUFFIX, keccak256(bytes(ensPrefix_))));\\n        IResolver resolver = ens.resolver(node);\\n        return resolver.addr(node);\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        Card memory card = cards[tokenId];\\n\\n        string[17] memory parts;\\n        parts[0] = themes[card.theme];\\n        parts[1] = getValueString(card.value);\\n        parts[2] = ' /><text x=\\\"10\\\" y=\\\"60\\\" class=\\\"base\\\"> from: ';\\n        parts[3] = getIssuerString(card.issuer, card.ens);\\n        parts[4] = ' ETH</text><text x=\\\"10\\\" y=\\\"100\\\" class=\\\"base\\\">note:</text><text x=\\\"30\\\" y=\\\"120\\\" class=\\\"base\\\">';\\n        parts[5] = card.note[0];\\n        parts[6] = '</text><text x=\\\"30\\\" y=\\\"140\\\" class=\\\"base\\\">';\\n        parts[7] = card.note[1];\\n        parts[8] = '</text><text x=\\\"30\\\" y=\\\"160\\\" class=\\\"base\\\">';\\n        parts[9] = card.note[2];\\n        parts[10] = '</text><text x=\\\"30\\\" y=\\\"180\\\" class=\\\"base\\\">';\\n        parts[11] = card.note[3];\\n        parts[12] = '</text><text x=\\\"30\\\" y=\\\"200\\\" class=\\\"base\\\">';\\n        parts[13] = card.note[4];\\n        parts[14] = '</text><text x=\\\"30\\\" y=\\\"220\\\" class=\\\"base\\\">';\\n        parts[15] = card.note[5];\\n        parts[16] = '</text></svg>';\\n\\n        string memory output = string(abi.encodePacked(parts[0], parts[1], parts[2], parts[3], parts[4], parts[5], parts[6], parts[7], parts[8]));\\n        output = string(abi.encodePacked(output, parts[9], parts[10], parts[11], parts[12], parts[13], parts[14], parts[15], parts[16]));\\n        \\n        string memory json = Base64.encode(bytes(string(abi.encodePacked('{\\\"name\\\": \\\"Gift Card #', uint2str(tokenId), '\\\", \\\"description\\\": \\\"Eth Gift Cards are Ether wrapped as an ERC721 NFT with a custom note. Owner can burn the NFT to retreive the Ether.\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,', Base64.encode(bytes(output)), '\\\"}'))));\\n        output = string(abi.encodePacked('data:application/json;base64,', json));\\n\\n        return output;\\n    }\\n\\n    function getIssuerString(address issuer_, string memory ens_) internal pure returns (string memory) {\\n        if (keccak256(bytes(ens_)) == keccak256(bytes(\\\"\\\"))) {\\n            return string(abi.encodePacked(\\\"0x\\\", addr2str(issuer_)));\\n        } else {\\n            return string(abi.encodePacked(ens_, \\\".eth\\\"));\\n        }\\n    }\\n\\n    function getValueString(uint256 value_) internal pure returns (string memory) {\\n        uint256 end = value_ % 1 ether;\\n        uint256 start = value_ / 1 ether;\\n        string memory startString = uint2str(start);\\n        string memory endString = uint2str(end);\\n        while (bytes(endString).length < 17) {\\n            endString = string(abi.encodePacked(\\\"0\\\", endString));\\n        }\\n        return string(abi.encodePacked(startString, \\\".\\\", endString));\\n    }\\n\\n    function addr2str(address x) internal pure returns (string memory) {\\n        bytes memory s = new bytes(40);\\n        for (uint i = 0; i < 20; i++) {\\n            bytes1 b = bytes1(uint8(uint(uint160(x)) / (2**(8*(19 - i)))));\\n            bytes1 hi = bytes1(uint8(b) / 16);\\n            bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n            s[2*i] = char(hi);\\n            s[2*i+1] = char(lo);            \\n        }\\n        return string(s);\\n    }\\n\\n    function char(bytes1 b) internal pure returns (bytes1) {\\n        if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n        else return bytes1(uint8(b) + 0x57);\\n    }\\n\\n    function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k-1;\\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    receive() external payable {}\\n}\",\"keccak256\":\"0x185a5446adb85ea09aee700efb8d6725bf7dd41463d0194a702b2f9112ae9803\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052601080546001600160a01b0319166e0c2e074ec69a0dfb2997ba6c7d2e1e1790553480156200003257600080fd5b5060405162003ca538038062003ca583398101604081905262000055916200034f565b8251839083906200006e90600090602085019062000214565b5080516200008490600190602084019062000214565b505050620000a16200009b620000ba60201b60201c565b620000be565b6001600b55620000b18162000110565b5050506200055b565b3390565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600a546001600160a01b031633146200016f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390fd5b8051600c5460005b82811015620001f5578381815181106200019557620001956200052f565b6020026020010151600e60008385620001af9190620004a3565b620001bc906001620004a3565b81526020019081526020016000209080519060200190620001df92919062000214565b5080620001ec81620004fb565b91505062000177565b5081600c60008282546200020a9190620004a3565b9091555050505050565b8280546200022290620004be565b90600052602060002090601f01602090048101928262000246576000855562000291565b82601f106200026157805160ff191683800117855562000291565b8280016001018555821562000291579182015b828111156200029157825182559160200191906001019062000274565b506200029f929150620002a3565b5090565b5b808211156200029f5760008155600101620002a4565b600082601f830112620002cc57600080fd5b81516001600160401b03811115620002e857620002e862000545565b6020620002fe601f8301601f1916820162000470565b82815285828487010111156200031357600080fd5b60005b838110156200033357858101830151828201840152820162000316565b83811115620003455760008385840101525b5095945050505050565b6000806000606084860312156200036557600080fd5b83516001600160401b03808211156200037d57600080fd5b6200038b87838801620002ba565b9450602091508186015181811115620003a357600080fd5b620003b188828901620002ba565b945050604086015181811115620003c757600080fd5b8601601f81018813620003d957600080fd5b805182811115620003ee57620003ee62000545565b8060051b620003ff85820162000470565b8281528581019084870183860188018d10156200041b57600080fd5b60009350835b858110156200045d5781518881111562000439578586fd5b620004498f8b838b0101620002ba565b855250928801929088019060010162000421565b5050809750505050505050509250925092565b604051601f8201601f191681016001600160401b03811182821017156200049b576200049b62000545565b604052919050565b60008219821115620004b957620004b962000519565b500190565b600181811c90821680620004d357607f821691505b60208210811415620004f557634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141562000512576200051262000519565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b61373a806200056b6000396000f3fe6080604052600436106101a05760003560e01c806354c16960116100ec578063a22cb4651161008a578063d7dde72811610064578063d7dde7281461049d578063e985e9c5146104bd578063f2fde38b14610506578063f84ddf0b1461052657600080fd5b8063a22cb4651461043d578063b88d4fde1461045d578063c87b56dd1461047d57600080fd5b8063715018a6116100c6578063715018a6146103c55780638da5cb5b146103da5780638dc10768146103f857806395d89b411461042857600080fd5b806354c16960146103725780636352211e1461038557806370a08231146103a557600080fd5b806323b872dd1161015957806342842e0e1161013357806342842e0e146102f257806342966c6814610312578063461a4478146103325780634f6ccce71461035257600080fd5b806323b872dd1461029c5780632f745c59146102bc5780633e5c8f31146102dc57600080fd5b806301ffc9a7146101ac57806306fdde03146101e1578063081812fc14610203578063095ea7b31461023b57806318160ddd1461025d5780632350826b1461027c57600080fd5b366101a757005b600080fd5b3480156101b857600080fd5b506101cc6101c7366004612d09565b61053c565b60405190151581526020015b60405180910390f35b3480156101ed57600080fd5b506101f6610567565b6040516101d891906130ed565b34801561020f57600080fd5b5061022361021e366004612d78565b6105f9565b6040516001600160a01b0390911681526020016101d8565b34801561024757600080fd5b5061025b610256366004612b38565b610693565b005b34801561026957600080fd5b506008545b6040519081526020016101d8565b34801561028857600080fd5b506101f6610297366004612d78565b6107a9565b3480156102a857600080fd5b5061025b6102b7366004612a44565b610843565b3480156102c857600080fd5b5061026e6102d7366004612b38565b610874565b3480156102e857600080fd5b5061026e600c5481565b3480156102fe57600080fd5b5061025b61030d366004612a44565b61090a565b34801561031e57600080fd5b5061025b61032d366004612d78565b610925565b34801561033e57600080fd5b5061022361034d366004612d43565b610ac1565b34801561035e57600080fd5b5061026e61036d366004612d78565b610c5d565b61025b610380366004612b64565b610cf0565b34801561039157600080fd5b506102236103a0366004612d78565b610fc5565b3480156103b157600080fd5b5061026e6103c03660046129d1565b61103c565b3480156103d157600080fd5b5061025b6110c3565b3480156103e657600080fd5b50600a546001600160a01b0316610223565b34801561040457600080fd5b50610418610413366004612d78565b6110f9565b6040516101d894939291906131d8565b34801561043457600080fd5b506101f66111b3565b34801561044957600080fd5b5061025b610458366004612b05565b6111c2565b34801561046957600080fd5b5061025b610478366004612a85565b611287565b34801561048957600080fd5b506101f6610498366004612d78565b6112bf565b3480156104a957600080fd5b5061025b6104b8366004612c41565b6117b1565b3480156104c957600080fd5b506101cc6104d8366004612a0b565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561051257600080fd5b5061025b6105213660046129d1565b611871565b34801561053257600080fd5b5061026e600d5481565b60006001600160e01b0319821663780e9d6360e01b148061056157506105618261190c565b92915050565b6060600080546105769061346e565b80601f01602080910402602001604051908101604052809291908181526020018280546105a29061346e565b80156105ef5780601f106105c4576101008083540402835291602001916105ef565b820191906000526020600020905b8154815290600101906020018083116105d257829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166106775760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061069e82610fc5565b9050806001600160a01b0316836001600160a01b0316141561070c5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161066e565b336001600160a01b0382161480610728575061072881336104d8565b61079a5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161066e565b6107a4838361195c565b505050565b600e60205260009081526040902080546107c29061346e565b80601f01602080910402602001604051908101604052809291908181526020018280546107ee9061346e565b801561083b5780601f106108105761010080835404028352916020019161083b565b820191906000526020600020905b81548152906001019060200180831161081e57829003601f168201915b505050505081565b61084d33826119ca565b6108695760405162461bcd60e51b815260040161066e90613187565b6107a4838383611abd565b600061087f8361103c565b82106108e15760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b606482015260840161066e565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6107a483838360405180602001604052806000815250611287565b6002600b5414156109785760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161066e565b6002600b5561098681610fc5565b6001600160a01b0316336001600160a01b0316146109d95760405162461bcd60e51b815260206004820152601060248201526f31b0b63632b9103737ba1037bbb732b960811b604482015260640161066e565b6000818152600f6020526040812080548282556001820183905591610a0160028301826127c0565b610a0f6003830160006127fa565b5060090180546001600160a01b0319169055610a2a82611c68565b604051600090339083908381818185875af1925050503d8060008114610a6c576040519150601f19603f3d011682016040523d82523d6000602084013e610a71565b606091505b5050905080610ab75760405162461bcd60e51b81526020600482015260126024820152710ccc2d2d8cac840e8de40e6cadcc840cae8d60731b604482015260640161066e565b50506001600b5550565b60408051808201825260038152620cae8d60eb1b60209182015290516000918291610b199183917f4f5b812789fc606be1b3b16908db13fc7a9adf7ca72641f84d75b47069d3d7f09101918252602082015260400190565b60408051601f198184030181528282528051602091820120865187830120918401529082015260600160408051808303601f19018152908290528051602090910120601054630178b8bf60e01b8352600483018290529092506000916001600160a01b0390911690630178b8bf9060240160206040518083038186803b158015610ba257600080fd5b505afa158015610bb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bda91906129ee565b604051631d9dabef60e11b8152600481018490529091506001600160a01b03821690633b3b57de9060240160206040518083038186803b158015610c1d57600080fd5b505afa158015610c31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5591906129ee565b949350505050565b6000610c6860085490565b8210610ccb5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b606482015260840161066e565b60088281548110610cde57610cde61351a565b90600052602060002001549050919050565b6002600b541415610d435760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161066e565b6002600b5534610d805760405162461bcd60e51b81526020600482015260086024820152676e6f2076616c756560c01b604482015260640161066e565b60008363ffffffff16118015610d9e5750600c548363ffffffff1611155b610dda5760405162461bcd60e51b815260206004820152600d60248201526c696e76616c6964207468656d6560981b604482015260640161066e565b60005b6006811015610e5557602a858260068110610dfa57610dfa61351a565b6020020151511115610e435760405162461bcd60e51b81526020600482015260126024820152716e6f7465206c696e6520746f6f206c6f6e6760701b604482015260640161066e565b80610e4d816134a9565b915050610ddd565b50604080516020808201909252600090528151908201207fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4701480610eb25750610e9d81610ac1565b6001600160a01b0316336001600160a01b0316145b610ef55760405162461bcd60e51b8152602060048201526014602482015273656e7320646f6573206e6f74207265736f6c766560601b604482015260640161066e565b6001600d6000828254610f08919061326a565b9091555050600d546040805160a08101825234815263ffffffff86166020808301918252828401868152606084018a90523360808501526000868152600f83529490942083518155915160018301559251805192939192610f6f9260028501920190612809565b506060820151610f85906003830190600661288d565b5060809190910151600990910180546001600160a01b0319166001600160a01b03909216919091179055610fb98382611d0f565b50506001600b55505050565b6000818152600260205260408120546001600160a01b0316806105615760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161066e565b60006001600160a01b0382166110a75760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161066e565b506001600160a01b031660009081526003602052604090205490565b600a546001600160a01b031633146110ed5760405162461bcd60e51b815260040161066e90613152565b6110f76000611d2d565b565b600f60205260009081526040902080546001820154600283018054929391926111219061346e565b80601f016020809104026020016040519081016040528092919081815260200182805461114d9061346e565b801561119a5780601f1061116f5761010080835404028352916020019161119a565b820191906000526020600020905b81548152906001019060200180831161117d57829003601f168201915b505050600990930154919250506001600160a01b031684565b6060600180546105769061346e565b6001600160a01b03821633141561121b5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161066e565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b61129133836119ca565b6112ad5760405162461bcd60e51b815260040161066e90613187565b6112b984848484611d7f565b50505050565b60606000600f60008481526020019081526020016000206040518060a001604052908160008201548152602001600182015481526020016002820180546113059061346e565b80601f01602080910402602001604051908101604052809291908181526020018280546113319061346e565b801561137e5780601f106113535761010080835404028352916020019161137e565b820191906000526020600020905b81548152906001019060200180831161136157829003601f168201915b50505091835250506040805160c081019091526020909101906003830160066000835b828210156114445783820180546113b79061346e565b80601f01602080910402602001604051908101604052809291908181526020018280546113e39061346e565b80156114305780601f1061140557610100808354040283529160200191611430565b820191906000526020600020905b81548152906001019060200180831161141357829003601f168201915b5050505050815260200190600101906113a1565b50505090825250600991909101546001600160a01b0316602090910152905061146b6128d9565b6020808301516000908152600e90915260409020805461148a9061346e565b80601f01602080910402602001604051908101604052809291908181526020018280546114b69061346e565b80156115035780601f106114d857610100808354040283529160200191611503565b820191906000526020600020905b8154815290600101906020018083116114e657829003601f168201915b50505050508160006011811061151b5761151b61351a565b6020020152815161152b90611db2565b81600160200201819052506040518060600160405280602b8152602001613688602b913981600260200201526080820151604083015161156b9190611e59565b60608201526040805160808101909152605b80825261362d602083013960808201526060828101515160a083015260408051918201905260298082526136dc602083013960c082015260608281015160209081015160e08401526040805192830190526029808352906135c490830139610100820152606082810151604090810151610120840152805191820190526029808252613572602083013961014082015260608281015181015161016083015260408051918201905260298082526136b36020830139610180820152606082810151608001516101a0830152604080519182019052602980825261359b60208301396101c0820152606082015160a001516101e082015260408051808201909152600d81526c1e17ba32bc3a1f1e17b9bb339f60991b6020820152816010602090810291909101919091528151828201516040808501516060860151608087015160a088015160c089015160e08a01516101008b0151965160009a6116e49a99989101612dbd565b60408051808303601f19018152908290526101208401516101408501516101608601516101808701516101a08801516101c08901516101e08a01516102008b0151979950611737988a9890602001612dbd565b6040516020818303038152906040529050600061178461175687611ed9565b61175f84612002565b604051602001611770929190612f79565b604051602081830303815290604052612002565b9050806040516020016117979190612f34565b60408051601f198184030181529190529695505050505050565b600a546001600160a01b031633146117db5760405162461bcd60e51b815260040161066e90613152565b8051600c5460005b82811015611854578381815181106117fd576117fd61351a565b6020026020010151600e60008385611815919061326a565b61182090600161326a565b81526020019081526020016000209080519060200190611841929190612809565b508061184c816134a9565b9150506117e3565b5081600c6000828254611867919061326a565b9091555050505050565b600a546001600160a01b0316331461189b5760405162461bcd60e51b815260040161066e90613152565b6001600160a01b0381166119005760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161066e565b61190981611d2d565b50565b60006001600160e01b031982166380ac58cd60e01b148061193d57506001600160e01b03198216635b5e139f60e01b145b8061056157506301ffc9a760e01b6001600160e01b0319831614610561565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061199182610fc5565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316611a435760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161066e565b6000611a4e83610fc5565b9050806001600160a01b0316846001600160a01b03161480611a895750836001600160a01b0316611a7e846105f9565b6001600160a01b0316145b80610c5557506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff16610c55565b826001600160a01b0316611ad082610fc5565b6001600160a01b031614611b385760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b606482015260840161066e565b6001600160a01b038216611b9a5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161066e565b611ba5838383612168565b611bb060008261195c565b6001600160a01b0383166000908152600360205260408120805460019290611bd9908490613408565b90915550506001600160a01b0382166000908152600360205260408120805460019290611c0790849061326a565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000611c7382610fc5565b9050611c8181600084612168565b611c8c60008361195c565b6001600160a01b0381166000908152600360205260408120805460019290611cb5908490613408565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b611d29828260405180602001604052806000815250612220565b5050565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611d8a848484611abd565b611d9684848484612253565b6112b95760405162461bcd60e51b815260040161066e90613100565b60606000611dc8670de0b6b3a7640000846134c4565b90506000611dde670de0b6b3a7640000856132a7565b90506000611deb82611ed9565b90506000611df884611ed9565b90505b601181511015611e2c5780604051602001611e169190612ee1565b6040516020818303038152906040529050611dfb565b8181604051602001611e3f929190612ea5565b604051602081830303815290604052945050505050919050565b604080516020808201909252600090528151908201206060907fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4701415611ec857611ea283612360565b604051602001611eb29190612f0a565b6040516020818303038152906040529050610561565b81604051602001611eb29190612e7d565b606081611efd5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611f275780611f11816134a9565b9150611f209050600a836132a7565b9150611f01565b60008167ffffffffffffffff811115611f4257611f42613530565b6040519080825280601f01601f191660200182016040528015611f6c576020820181803683370190505b509050815b8515611ff957611f82600182613408565b90506000611f91600a886132a7565b611f9c90600a6133c8565b611fa69088613408565b611fb1906030613282565b905060008160f81b905080848481518110611fce57611fce61351a565b60200101906001600160f81b031916908160001a905350611ff0600a896132a7565b97505050611f71565b50949350505050565b805160609080612022575050604080516020810190915260008152919050565b6000600361203183600261326a565b61203b91906132a7565b6120469060046133c8565b9050600061205582602061326a565b67ffffffffffffffff81111561206d5761206d613530565b6040519080825280601f01601f191660200182016040528015612097576020820181803683370190505b50905060006040518060600160405280604081526020016135ed604091399050600181016020830160005b86811015612123576003818a01810151603f601282901c8116860151600c83901c8216870151600684901c831688015192909316870151600891821b60ff94851601821b92841692909201901b91160160e01b8352600490920191016120c2565b50600386066001811461213d576002811461214e5761215a565b613d3d60f01b60011983015261215a565b603d60f81b6000198301525b505050918152949350505050565b6001600160a01b0383166121c3576121be81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6121e6565b816001600160a01b0316836001600160a01b0316146121e6576121e683826124a7565b6001600160a01b0382166121fd576107a481612544565b826001600160a01b0316826001600160a01b0316146107a4576107a482826125f3565b61222a8383612637565b6122376000848484612253565b6107a45760405162461bcd60e51b815260040161066e90613100565b60006001600160a01b0384163b1561235557604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906122979033908990889088906004016130b0565b602060405180830381600087803b1580156122b157600080fd5b505af19250505080156122e1575060408051601f3d908101601f191682019092526122de91810190612d26565b60015b61233b573d80801561230f576040519150601f19603f3d011682016040523d82523d6000602084013e612314565b606091505b5080516123335760405162461bcd60e51b815260040161066e90613100565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610c55565b506001949350505050565b60408051602880825260608281019093526000919060208201818036833701905050905060005b60148110156124a057600061239d826013613408565b6123a89060086133c8565b6123b3906002613320565b6123c6906001600160a01b0387166132a7565b60f81b9050600060108260f81c6123dd91906132bb565b60f81b905060008160f81c60106123f491906133e7565b8360f81c612402919061341f565b60f81b905061241082612785565b8561241c8660026133c8565b8151811061242c5761242c61351a565b60200101906001600160f81b031916908160001a90535061244c81612785565b856124588660026133c8565b61246390600161326a565b815181106124735761247361351a565b60200101906001600160f81b031916908160001a9053505050508080612498906134a9565b915050612387565b5092915050565b600060016124b48461103c565b6124be9190613408565b600083815260076020526040902054909150808214612511576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061255690600190613408565b6000838152600960205260408120546008805493945090928490811061257e5761257e61351a565b90600052602060002001549050806008838154811061259f5761259f61351a565b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806125d7576125d7613504565b6001900381819060005260206000200160009055905550505050565b60006125fe8361103c565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6001600160a01b03821661268d5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161066e565b6000818152600260205260409020546001600160a01b0316156126f25760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161066e565b6126fe60008383612168565b6001600160a01b038216600090815260036020526040812080546001929061272790849061326a565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000600a60f883901c10156127ac576127a360f883901c6030613282565b60f81b92915050565b6127a360f883901c6057613282565b919050565b5080546127cc9061346e565b6000825580601f106127dc575050565b601f0160209004906000526020600020908101906119099190612901565b50611909906006810190612916565b8280546128159061346e565b90600052602060002090601f016020900481019282612837576000855561287d565b82601f1061285057805160ff191683800117855561287d565b8280016001018555821561287d579182015b8281111561287d578251825591602001919060010190612862565b50612889929150612901565b5090565b82600681019282156128cd579160200282015b828111156128cd57825180516128bd918491602090910190612809565b50916020019190600101906128a0565b50612889929150612916565b6040518061022001604052806011905b60608152602001906001900390816128e95790505090565b5b808211156128895760008155600101612902565b8082111561288957600061292a82826127c0565b50600101612916565b600067ffffffffffffffff83111561294d5761294d613530565b612960601f8401601f1916602001613239565b905082815283838301111561297457600080fd5b828260208301376000602084830101529392505050565b80356127bb81613546565b600082601f8301126129a757600080fd5b6129b683833560208501612933565b9392505050565b803563ffffffff811681146127bb57600080fd5b6000602082840312156129e357600080fd5b81356129b681613546565b600060208284031215612a0057600080fd5b81516129b681613546565b60008060408385031215612a1e57600080fd5b8235612a2981613546565b91506020830135612a3981613546565b809150509250929050565b600080600060608486031215612a5957600080fd5b8335612a6481613546565b92506020840135612a7481613546565b929592945050506040919091013590565b60008060008060808587031215612a9b57600080fd5b8435612aa681613546565b93506020850135612ab681613546565b925060408501359150606085013567ffffffffffffffff811115612ad957600080fd5b8501601f81018713612aea57600080fd5b612af987823560208401612933565b91505092959194509250565b60008060408385031215612b1857600080fd5b8235612b2381613546565b915060208301358015158114612a3957600080fd5b60008060408385031215612b4b57600080fd5b8235612b5681613546565b946020939093013593505050565b60008060008060808587031215612b7a57600080fd5b843567ffffffffffffffff80821115612b9257600080fd5b818701915087601f830112612ba657600080fd5b612bae613210565b80838a60c086011115612bc057600080fd5b60005b6006811015612bfd57813585811115612bdb57600080fd5b612be78d828901612996565b8552506020938401939190910190600101612bc3565b50508097505050612c10602088016129bd565b9450612c1e6040880161298b565b93506060870135915080821115612c3457600080fd5b50612af987828801612996565b60006020808385031215612c5457600080fd5b823567ffffffffffffffff80821115612c6c57600080fd5b818501915085601f830112612c8057600080fd5b813581811115612c9257612c92613530565b8060051b612ca1858201613239565b8281528581019085870183870188018b1015612cbc57600080fd5b60009350835b85811015612cf957813587811115612cd8578586fd5b612ce68d8b838c0101612996565b8552509288019290880190600101612cc2565b50909a9950505050505050505050565b600060208284031215612d1b57600080fd5b81356129b68161355b565b600060208284031215612d3857600080fd5b81516129b68161355b565b600060208284031215612d5557600080fd5b813567ffffffffffffffff811115612d6c57600080fd5b610c5584828501612996565b600060208284031215612d8a57600080fd5b5035919050565b60008151808452612da9816020860160208601613442565b601f01601f19169290920160200192915050565b60008a51612dcf818460208f01613442565b8a51612de18183860160208f01613442565b8a519184010190612df6818360208e01613442565b8951612e088183850160208e01613442565b8951929091010190612e1e818360208c01613442565b8751612e308183850160208c01613442565b8751929091010190612e46818360208a01613442565b8551910190612e59818360208901613442565b8451612e6b8183850160208901613442565b9101019b9a5050505050505050505050565b60008251612e8f818460208701613442565b6305ccae8d60e31b920191825250600401919050565b60008351612eb7818460208801613442565b601760f91b9083019081528351612ed5816001840160208801613442565b01600101949350505050565b600360fc1b815260008251612efd816001850160208701613442565b9190910160010192915050565b61060f60f31b815260008251612f27816002850160208701613442565b9190910160020192915050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251612f6c81601d850160208701613442565b91909101601d0192915050565b747b226e616d65223a2022476966742043617264202360581b81528251600090612faa816015850160208801613442565b7f222c20226465736372697074696f6e223a2022457468204769667420436172646015918401918201527f7320617265204574686572207772617070656420617320616e2045524337323160358201527f204e46542077697468206120637573746f6d206e6f74652e204f776e6572206360558201527f616e206275726e20746865204e465420746f207265747265697665207468652060758201527f45746865722e222c2022696d616765223a2022646174613a696d6167652f737660958201526c19cade1b5b0ed8985cd94d8d0b609a1b60b582015283516130958160c2840160208801613442565b61227d60f01b60c2929091019182015260c401949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906130e390830184612d91565b9695505050505050565b6020815260006129b66020830184612d91565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b8481528360208201526080604082015260006131f76080830185612d91565b905060018060a01b038316606083015295945050505050565b60405160c0810167ffffffffffffffff8111828210171561323357613233613530565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561326257613262613530565b604052919050565b6000821982111561327d5761327d6134d8565b500190565b600060ff821660ff84168060ff0382111561329f5761329f6134d8565b019392505050565b6000826132b6576132b66134ee565b500490565b600060ff8316806132ce576132ce6134ee565b8060ff84160491505092915050565b600181815b808511156133185781600019048211156132fe576132fe6134d8565b8085161561330b57918102915b93841c93908002906132e2565b509250929050565b60006129b6838360008261333657506001610561565b8161334357506000610561565b816001811461335957600281146133635761337f565b6001915050610561565b60ff841115613374576133746134d8565b50506001821b610561565b5060208310610133831016604e8410600b84101617156133a2575081810a610561565b6133ac83836132dd565b80600019048211156133c0576133c06134d8565b029392505050565b60008160001904831182151516156133e2576133e26134d8565b500290565b600060ff821660ff84168160ff04811182151516156133c0576133c06134d8565b60008282101561341a5761341a6134d8565b500390565b600060ff821660ff841680821015613439576134396134d8565b90039392505050565b60005b8381101561345d578181015183820152602001613445565b838111156112b95750506000910152565b600181811c9082168061348257607f821691505b602082108114156134a357634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156134bd576134bd6134d8565b5060010190565b6000826134d3576134d36134ee565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461190957600080fd5b6001600160e01b03198116811461190957600080fdfe3c2f746578743e3c7465787420783d2233302220793d223138302220636c6173733d2262617365223e3c2f746578743e3c7465787420783d2233302220793d223232302220636c6173733d2262617365223e3c2f746578743e3c7465787420783d2233302220793d223136302220636c6173733d2262617365223e4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f204554483c2f746578743e3c7465787420783d2231302220793d223130302220636c6173733d2262617365223e6e6f74653a3c2f746578743e3c7465787420783d2233302220793d223132302220636c6173733d2262617365223e202f3e3c7465787420783d2231302220793d2236302220636c6173733d2262617365223e2066726f6d3a203c2f746578743e3c7465787420783d2233302220793d223230302220636c6173733d2262617365223e3c2f746578743e3c7465787420783d2233302220793d223134302220636c6173733d2262617365223ea26469706673582212205d95709abca8c6750ee04afdbf15e1a6b4e25afba6e7db5aad14c34950a2c91a64736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106101a05760003560e01c806354c16960116100ec578063a22cb4651161008a578063d7dde72811610064578063d7dde7281461049d578063e985e9c5146104bd578063f2fde38b14610506578063f84ddf0b1461052657600080fd5b8063a22cb4651461043d578063b88d4fde1461045d578063c87b56dd1461047d57600080fd5b8063715018a6116100c6578063715018a6146103c55780638da5cb5b146103da5780638dc10768146103f857806395d89b411461042857600080fd5b806354c16960146103725780636352211e1461038557806370a08231146103a557600080fd5b806323b872dd1161015957806342842e0e1161013357806342842e0e146102f257806342966c6814610312578063461a4478146103325780634f6ccce71461035257600080fd5b806323b872dd1461029c5780632f745c59146102bc5780633e5c8f31146102dc57600080fd5b806301ffc9a7146101ac57806306fdde03146101e1578063081812fc14610203578063095ea7b31461023b57806318160ddd1461025d5780632350826b1461027c57600080fd5b366101a757005b600080fd5b3480156101b857600080fd5b506101cc6101c7366004612d09565b61053c565b60405190151581526020015b60405180910390f35b3480156101ed57600080fd5b506101f6610567565b6040516101d891906130ed565b34801561020f57600080fd5b5061022361021e366004612d78565b6105f9565b6040516001600160a01b0390911681526020016101d8565b34801561024757600080fd5b5061025b610256366004612b38565b610693565b005b34801561026957600080fd5b506008545b6040519081526020016101d8565b34801561028857600080fd5b506101f6610297366004612d78565b6107a9565b3480156102a857600080fd5b5061025b6102b7366004612a44565b610843565b3480156102c857600080fd5b5061026e6102d7366004612b38565b610874565b3480156102e857600080fd5b5061026e600c5481565b3480156102fe57600080fd5b5061025b61030d366004612a44565b61090a565b34801561031e57600080fd5b5061025b61032d366004612d78565b610925565b34801561033e57600080fd5b5061022361034d366004612d43565b610ac1565b34801561035e57600080fd5b5061026e61036d366004612d78565b610c5d565b61025b610380366004612b64565b610cf0565b34801561039157600080fd5b506102236103a0366004612d78565b610fc5565b3480156103b157600080fd5b5061026e6103c03660046129d1565b61103c565b3480156103d157600080fd5b5061025b6110c3565b3480156103e657600080fd5b50600a546001600160a01b0316610223565b34801561040457600080fd5b50610418610413366004612d78565b6110f9565b6040516101d894939291906131d8565b34801561043457600080fd5b506101f66111b3565b34801561044957600080fd5b5061025b610458366004612b05565b6111c2565b34801561046957600080fd5b5061025b610478366004612a85565b611287565b34801561048957600080fd5b506101f6610498366004612d78565b6112bf565b3480156104a957600080fd5b5061025b6104b8366004612c41565b6117b1565b3480156104c957600080fd5b506101cc6104d8366004612a0b565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561051257600080fd5b5061025b6105213660046129d1565b611871565b34801561053257600080fd5b5061026e600d5481565b60006001600160e01b0319821663780e9d6360e01b148061056157506105618261190c565b92915050565b6060600080546105769061346e565b80601f01602080910402602001604051908101604052809291908181526020018280546105a29061346e565b80156105ef5780601f106105c4576101008083540402835291602001916105ef565b820191906000526020600020905b8154815290600101906020018083116105d257829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166106775760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061069e82610fc5565b9050806001600160a01b0316836001600160a01b0316141561070c5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161066e565b336001600160a01b0382161480610728575061072881336104d8565b61079a5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161066e565b6107a4838361195c565b505050565b600e60205260009081526040902080546107c29061346e565b80601f01602080910402602001604051908101604052809291908181526020018280546107ee9061346e565b801561083b5780601f106108105761010080835404028352916020019161083b565b820191906000526020600020905b81548152906001019060200180831161081e57829003601f168201915b505050505081565b61084d33826119ca565b6108695760405162461bcd60e51b815260040161066e90613187565b6107a4838383611abd565b600061087f8361103c565b82106108e15760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b606482015260840161066e565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6107a483838360405180602001604052806000815250611287565b6002600b5414156109785760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161066e565b6002600b5561098681610fc5565b6001600160a01b0316336001600160a01b0316146109d95760405162461bcd60e51b815260206004820152601060248201526f31b0b63632b9103737ba1037bbb732b960811b604482015260640161066e565b6000818152600f6020526040812080548282556001820183905591610a0160028301826127c0565b610a0f6003830160006127fa565b5060090180546001600160a01b0319169055610a2a82611c68565b604051600090339083908381818185875af1925050503d8060008114610a6c576040519150601f19603f3d011682016040523d82523d6000602084013e610a71565b606091505b5050905080610ab75760405162461bcd60e51b81526020600482015260126024820152710ccc2d2d8cac840e8de40e6cadcc840cae8d60731b604482015260640161066e565b50506001600b5550565b60408051808201825260038152620cae8d60eb1b60209182015290516000918291610b199183917f4f5b812789fc606be1b3b16908db13fc7a9adf7ca72641f84d75b47069d3d7f09101918252602082015260400190565b60408051601f198184030181528282528051602091820120865187830120918401529082015260600160408051808303601f19018152908290528051602090910120601054630178b8bf60e01b8352600483018290529092506000916001600160a01b0390911690630178b8bf9060240160206040518083038186803b158015610ba257600080fd5b505afa158015610bb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bda91906129ee565b604051631d9dabef60e11b8152600481018490529091506001600160a01b03821690633b3b57de9060240160206040518083038186803b158015610c1d57600080fd5b505afa158015610c31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5591906129ee565b949350505050565b6000610c6860085490565b8210610ccb5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b606482015260840161066e565b60088281548110610cde57610cde61351a565b90600052602060002001549050919050565b6002600b541415610d435760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161066e565b6002600b5534610d805760405162461bcd60e51b81526020600482015260086024820152676e6f2076616c756560c01b604482015260640161066e565b60008363ffffffff16118015610d9e5750600c548363ffffffff1611155b610dda5760405162461bcd60e51b815260206004820152600d60248201526c696e76616c6964207468656d6560981b604482015260640161066e565b60005b6006811015610e5557602a858260068110610dfa57610dfa61351a565b6020020151511115610e435760405162461bcd60e51b81526020600482015260126024820152716e6f7465206c696e6520746f6f206c6f6e6760701b604482015260640161066e565b80610e4d816134a9565b915050610ddd565b50604080516020808201909252600090528151908201207fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4701480610eb25750610e9d81610ac1565b6001600160a01b0316336001600160a01b0316145b610ef55760405162461bcd60e51b8152602060048201526014602482015273656e7320646f6573206e6f74207265736f6c766560601b604482015260640161066e565b6001600d6000828254610f08919061326a565b9091555050600d546040805160a08101825234815263ffffffff86166020808301918252828401868152606084018a90523360808501526000868152600f83529490942083518155915160018301559251805192939192610f6f9260028501920190612809565b506060820151610f85906003830190600661288d565b5060809190910151600990910180546001600160a01b0319166001600160a01b03909216919091179055610fb98382611d0f565b50506001600b55505050565b6000818152600260205260408120546001600160a01b0316806105615760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161066e565b60006001600160a01b0382166110a75760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161066e565b506001600160a01b031660009081526003602052604090205490565b600a546001600160a01b031633146110ed5760405162461bcd60e51b815260040161066e90613152565b6110f76000611d2d565b565b600f60205260009081526040902080546001820154600283018054929391926111219061346e565b80601f016020809104026020016040519081016040528092919081815260200182805461114d9061346e565b801561119a5780601f1061116f5761010080835404028352916020019161119a565b820191906000526020600020905b81548152906001019060200180831161117d57829003601f168201915b505050600990930154919250506001600160a01b031684565b6060600180546105769061346e565b6001600160a01b03821633141561121b5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161066e565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b61129133836119ca565b6112ad5760405162461bcd60e51b815260040161066e90613187565b6112b984848484611d7f565b50505050565b60606000600f60008481526020019081526020016000206040518060a001604052908160008201548152602001600182015481526020016002820180546113059061346e565b80601f01602080910402602001604051908101604052809291908181526020018280546113319061346e565b801561137e5780601f106113535761010080835404028352916020019161137e565b820191906000526020600020905b81548152906001019060200180831161136157829003601f168201915b50505091835250506040805160c081019091526020909101906003830160066000835b828210156114445783820180546113b79061346e565b80601f01602080910402602001604051908101604052809291908181526020018280546113e39061346e565b80156114305780601f1061140557610100808354040283529160200191611430565b820191906000526020600020905b81548152906001019060200180831161141357829003601f168201915b5050505050815260200190600101906113a1565b50505090825250600991909101546001600160a01b0316602090910152905061146b6128d9565b6020808301516000908152600e90915260409020805461148a9061346e565b80601f01602080910402602001604051908101604052809291908181526020018280546114b69061346e565b80156115035780601f106114d857610100808354040283529160200191611503565b820191906000526020600020905b8154815290600101906020018083116114e657829003601f168201915b50505050508160006011811061151b5761151b61351a565b6020020152815161152b90611db2565b81600160200201819052506040518060600160405280602b8152602001613688602b913981600260200201526080820151604083015161156b9190611e59565b60608201526040805160808101909152605b80825261362d602083013960808201526060828101515160a083015260408051918201905260298082526136dc602083013960c082015260608281015160209081015160e08401526040805192830190526029808352906135c490830139610100820152606082810151604090810151610120840152805191820190526029808252613572602083013961014082015260608281015181015161016083015260408051918201905260298082526136b36020830139610180820152606082810151608001516101a0830152604080519182019052602980825261359b60208301396101c0820152606082015160a001516101e082015260408051808201909152600d81526c1e17ba32bc3a1f1e17b9bb339f60991b6020820152816010602090810291909101919091528151828201516040808501516060860151608087015160a088015160c089015160e08a01516101008b0151965160009a6116e49a99989101612dbd565b60408051808303601f19018152908290526101208401516101408501516101608601516101808701516101a08801516101c08901516101e08a01516102008b0151979950611737988a9890602001612dbd565b6040516020818303038152906040529050600061178461175687611ed9565b61175f84612002565b604051602001611770929190612f79565b604051602081830303815290604052612002565b9050806040516020016117979190612f34565b60408051601f198184030181529190529695505050505050565b600a546001600160a01b031633146117db5760405162461bcd60e51b815260040161066e90613152565b8051600c5460005b82811015611854578381815181106117fd576117fd61351a565b6020026020010151600e60008385611815919061326a565b61182090600161326a565b81526020019081526020016000209080519060200190611841929190612809565b508061184c816134a9565b9150506117e3565b5081600c6000828254611867919061326a565b9091555050505050565b600a546001600160a01b0316331461189b5760405162461bcd60e51b815260040161066e90613152565b6001600160a01b0381166119005760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161066e565b61190981611d2d565b50565b60006001600160e01b031982166380ac58cd60e01b148061193d57506001600160e01b03198216635b5e139f60e01b145b8061056157506301ffc9a760e01b6001600160e01b0319831614610561565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061199182610fc5565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316611a435760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161066e565b6000611a4e83610fc5565b9050806001600160a01b0316846001600160a01b03161480611a895750836001600160a01b0316611a7e846105f9565b6001600160a01b0316145b80610c5557506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff16610c55565b826001600160a01b0316611ad082610fc5565b6001600160a01b031614611b385760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b606482015260840161066e565b6001600160a01b038216611b9a5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161066e565b611ba5838383612168565b611bb060008261195c565b6001600160a01b0383166000908152600360205260408120805460019290611bd9908490613408565b90915550506001600160a01b0382166000908152600360205260408120805460019290611c0790849061326a565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000611c7382610fc5565b9050611c8181600084612168565b611c8c60008361195c565b6001600160a01b0381166000908152600360205260408120805460019290611cb5908490613408565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b611d29828260405180602001604052806000815250612220565b5050565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611d8a848484611abd565b611d9684848484612253565b6112b95760405162461bcd60e51b815260040161066e90613100565b60606000611dc8670de0b6b3a7640000846134c4565b90506000611dde670de0b6b3a7640000856132a7565b90506000611deb82611ed9565b90506000611df884611ed9565b90505b601181511015611e2c5780604051602001611e169190612ee1565b6040516020818303038152906040529050611dfb565b8181604051602001611e3f929190612ea5565b604051602081830303815290604052945050505050919050565b604080516020808201909252600090528151908201206060907fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4701415611ec857611ea283612360565b604051602001611eb29190612f0a565b6040516020818303038152906040529050610561565b81604051602001611eb29190612e7d565b606081611efd5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611f275780611f11816134a9565b9150611f209050600a836132a7565b9150611f01565b60008167ffffffffffffffff811115611f4257611f42613530565b6040519080825280601f01601f191660200182016040528015611f6c576020820181803683370190505b509050815b8515611ff957611f82600182613408565b90506000611f91600a886132a7565b611f9c90600a6133c8565b611fa69088613408565b611fb1906030613282565b905060008160f81b905080848481518110611fce57611fce61351a565b60200101906001600160f81b031916908160001a905350611ff0600a896132a7565b97505050611f71565b50949350505050565b805160609080612022575050604080516020810190915260008152919050565b6000600361203183600261326a565b61203b91906132a7565b6120469060046133c8565b9050600061205582602061326a565b67ffffffffffffffff81111561206d5761206d613530565b6040519080825280601f01601f191660200182016040528015612097576020820181803683370190505b50905060006040518060600160405280604081526020016135ed604091399050600181016020830160005b86811015612123576003818a01810151603f601282901c8116860151600c83901c8216870151600684901c831688015192909316870151600891821b60ff94851601821b92841692909201901b91160160e01b8352600490920191016120c2565b50600386066001811461213d576002811461214e5761215a565b613d3d60f01b60011983015261215a565b603d60f81b6000198301525b505050918152949350505050565b6001600160a01b0383166121c3576121be81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6121e6565b816001600160a01b0316836001600160a01b0316146121e6576121e683826124a7565b6001600160a01b0382166121fd576107a481612544565b826001600160a01b0316826001600160a01b0316146107a4576107a482826125f3565b61222a8383612637565b6122376000848484612253565b6107a45760405162461bcd60e51b815260040161066e90613100565b60006001600160a01b0384163b1561235557604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906122979033908990889088906004016130b0565b602060405180830381600087803b1580156122b157600080fd5b505af19250505080156122e1575060408051601f3d908101601f191682019092526122de91810190612d26565b60015b61233b573d80801561230f576040519150601f19603f3d011682016040523d82523d6000602084013e612314565b606091505b5080516123335760405162461bcd60e51b815260040161066e90613100565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610c55565b506001949350505050565b60408051602880825260608281019093526000919060208201818036833701905050905060005b60148110156124a057600061239d826013613408565b6123a89060086133c8565b6123b3906002613320565b6123c6906001600160a01b0387166132a7565b60f81b9050600060108260f81c6123dd91906132bb565b60f81b905060008160f81c60106123f491906133e7565b8360f81c612402919061341f565b60f81b905061241082612785565b8561241c8660026133c8565b8151811061242c5761242c61351a565b60200101906001600160f81b031916908160001a90535061244c81612785565b856124588660026133c8565b61246390600161326a565b815181106124735761247361351a565b60200101906001600160f81b031916908160001a9053505050508080612498906134a9565b915050612387565b5092915050565b600060016124b48461103c565b6124be9190613408565b600083815260076020526040902054909150808214612511576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061255690600190613408565b6000838152600960205260408120546008805493945090928490811061257e5761257e61351a565b90600052602060002001549050806008838154811061259f5761259f61351a565b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806125d7576125d7613504565b6001900381819060005260206000200160009055905550505050565b60006125fe8361103c565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6001600160a01b03821661268d5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161066e565b6000818152600260205260409020546001600160a01b0316156126f25760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161066e565b6126fe60008383612168565b6001600160a01b038216600090815260036020526040812080546001929061272790849061326a565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000600a60f883901c10156127ac576127a360f883901c6030613282565b60f81b92915050565b6127a360f883901c6057613282565b919050565b5080546127cc9061346e565b6000825580601f106127dc575050565b601f0160209004906000526020600020908101906119099190612901565b50611909906006810190612916565b8280546128159061346e565b90600052602060002090601f016020900481019282612837576000855561287d565b82601f1061285057805160ff191683800117855561287d565b8280016001018555821561287d579182015b8281111561287d578251825591602001919060010190612862565b50612889929150612901565b5090565b82600681019282156128cd579160200282015b828111156128cd57825180516128bd918491602090910190612809565b50916020019190600101906128a0565b50612889929150612916565b6040518061022001604052806011905b60608152602001906001900390816128e95790505090565b5b808211156128895760008155600101612902565b8082111561288957600061292a82826127c0565b50600101612916565b600067ffffffffffffffff83111561294d5761294d613530565b612960601f8401601f1916602001613239565b905082815283838301111561297457600080fd5b828260208301376000602084830101529392505050565b80356127bb81613546565b600082601f8301126129a757600080fd5b6129b683833560208501612933565b9392505050565b803563ffffffff811681146127bb57600080fd5b6000602082840312156129e357600080fd5b81356129b681613546565b600060208284031215612a0057600080fd5b81516129b681613546565b60008060408385031215612a1e57600080fd5b8235612a2981613546565b91506020830135612a3981613546565b809150509250929050565b600080600060608486031215612a5957600080fd5b8335612a6481613546565b92506020840135612a7481613546565b929592945050506040919091013590565b60008060008060808587031215612a9b57600080fd5b8435612aa681613546565b93506020850135612ab681613546565b925060408501359150606085013567ffffffffffffffff811115612ad957600080fd5b8501601f81018713612aea57600080fd5b612af987823560208401612933565b91505092959194509250565b60008060408385031215612b1857600080fd5b8235612b2381613546565b915060208301358015158114612a3957600080fd5b60008060408385031215612b4b57600080fd5b8235612b5681613546565b946020939093013593505050565b60008060008060808587031215612b7a57600080fd5b843567ffffffffffffffff80821115612b9257600080fd5b818701915087601f830112612ba657600080fd5b612bae613210565b80838a60c086011115612bc057600080fd5b60005b6006811015612bfd57813585811115612bdb57600080fd5b612be78d828901612996565b8552506020938401939190910190600101612bc3565b50508097505050612c10602088016129bd565b9450612c1e6040880161298b565b93506060870135915080821115612c3457600080fd5b50612af987828801612996565b60006020808385031215612c5457600080fd5b823567ffffffffffffffff80821115612c6c57600080fd5b818501915085601f830112612c8057600080fd5b813581811115612c9257612c92613530565b8060051b612ca1858201613239565b8281528581019085870183870188018b1015612cbc57600080fd5b60009350835b85811015612cf957813587811115612cd8578586fd5b612ce68d8b838c0101612996565b8552509288019290880190600101612cc2565b50909a9950505050505050505050565b600060208284031215612d1b57600080fd5b81356129b68161355b565b600060208284031215612d3857600080fd5b81516129b68161355b565b600060208284031215612d5557600080fd5b813567ffffffffffffffff811115612d6c57600080fd5b610c5584828501612996565b600060208284031215612d8a57600080fd5b5035919050565b60008151808452612da9816020860160208601613442565b601f01601f19169290920160200192915050565b60008a51612dcf818460208f01613442565b8a51612de18183860160208f01613442565b8a519184010190612df6818360208e01613442565b8951612e088183850160208e01613442565b8951929091010190612e1e818360208c01613442565b8751612e308183850160208c01613442565b8751929091010190612e46818360208a01613442565b8551910190612e59818360208901613442565b8451612e6b8183850160208901613442565b9101019b9a5050505050505050505050565b60008251612e8f818460208701613442565b6305ccae8d60e31b920191825250600401919050565b60008351612eb7818460208801613442565b601760f91b9083019081528351612ed5816001840160208801613442565b01600101949350505050565b600360fc1b815260008251612efd816001850160208701613442565b9190910160010192915050565b61060f60f31b815260008251612f27816002850160208701613442565b9190910160020192915050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251612f6c81601d850160208701613442565b91909101601d0192915050565b747b226e616d65223a2022476966742043617264202360581b81528251600090612faa816015850160208801613442565b7f222c20226465736372697074696f6e223a2022457468204769667420436172646015918401918201527f7320617265204574686572207772617070656420617320616e2045524337323160358201527f204e46542077697468206120637573746f6d206e6f74652e204f776e6572206360558201527f616e206275726e20746865204e465420746f207265747265697665207468652060758201527f45746865722e222c2022696d616765223a2022646174613a696d6167652f737660958201526c19cade1b5b0ed8985cd94d8d0b609a1b60b582015283516130958160c2840160208801613442565b61227d60f01b60c2929091019182015260c401949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906130e390830184612d91565b9695505050505050565b6020815260006129b66020830184612d91565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b8481528360208201526080604082015260006131f76080830185612d91565b905060018060a01b038316606083015295945050505050565b60405160c0810167ffffffffffffffff8111828210171561323357613233613530565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561326257613262613530565b604052919050565b6000821982111561327d5761327d6134d8565b500190565b600060ff821660ff84168060ff0382111561329f5761329f6134d8565b019392505050565b6000826132b6576132b66134ee565b500490565b600060ff8316806132ce576132ce6134ee565b8060ff84160491505092915050565b600181815b808511156133185781600019048211156132fe576132fe6134d8565b8085161561330b57918102915b93841c93908002906132e2565b509250929050565b60006129b6838360008261333657506001610561565b8161334357506000610561565b816001811461335957600281146133635761337f565b6001915050610561565b60ff841115613374576133746134d8565b50506001821b610561565b5060208310610133831016604e8410600b84101617156133a2575081810a610561565b6133ac83836132dd565b80600019048211156133c0576133c06134d8565b029392505050565b60008160001904831182151516156133e2576133e26134d8565b500290565b600060ff821660ff84168160ff04811182151516156133c0576133c06134d8565b60008282101561341a5761341a6134d8565b500390565b600060ff821660ff841680821015613439576134396134d8565b90039392505050565b60005b8381101561345d578181015183820152602001613445565b838111156112b95750506000910152565b600181811c9082168061348257607f821691505b602082108114156134a357634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156134bd576134bd6134d8565b5060010190565b6000826134d3576134d36134ee565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461190957600080fd5b6001600160e01b03198116811461190957600080fdfe3c2f746578743e3c7465787420783d2233302220793d223138302220636c6173733d2262617365223e3c2f746578743e3c7465787420783d2233302220793d223232302220636c6173733d2262617365223e3c2f746578743e3c7465787420783d2233302220793d223136302220636c6173733d2262617365223e4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f204554483c2f746578743e3c7465787420783d2231302220793d223130302220636c6173733d2262617365223e6e6f74653a3c2f746578743e3c7465787420783d2233302220793d223132302220636c6173733d2262617365223e202f3e3c7465787420783d2231302220793d2236302220636c6173733d2262617365223e2066726f6d3a203c2f746578743e3c7465787420783d2233302220793d223230302220636c6173733d2262617365223e3c2f746578743e3c7465787420783d2233302220793d223134302220636c6173733d2262617365223ea26469706673582212205d95709abca8c6750ee04afdbf15e1a6b4e25afba6e7db5aad14c34950a2c91a64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 169,
        "contract": "contracts/EthGiftCards.sol:EthGiftCards",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 171,
        "contract": "contracts/EthGiftCards.sol:EthGiftCards",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 175,
        "contract": "contracts/EthGiftCards.sol:EthGiftCards",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 179,
        "contract": "contracts/EthGiftCards.sol:EthGiftCards",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 183,
        "contract": "contracts/EthGiftCards.sol:EthGiftCards",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 189,
        "contract": "contracts/EthGiftCards.sol:EthGiftCards",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1108,
        "contract": "contracts/EthGiftCards.sol:EthGiftCards",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1112,
        "contract": "contracts/EthGiftCards.sol:EthGiftCards",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1115,
        "contract": "contracts/EthGiftCards.sol:EthGiftCards",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1119,
        "contract": "contracts/EthGiftCards.sol:EthGiftCards",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/EthGiftCards.sol:EthGiftCards",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 114,
        "contract": "contracts/EthGiftCards.sol:EthGiftCards",
        "label": "_status",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2175,
        "contract": "contracts/EthGiftCards.sol:EthGiftCards",
        "label": "lastThemeId",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2177,
        "contract": "contracts/EthGiftCards.sol:EthGiftCards",
        "label": "lastTokenId",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2181,
        "contract": "contracts/EthGiftCards.sol:EthGiftCards",
        "label": "themes",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2186,
        "contract": "contracts/EthGiftCards.sol:EthGiftCards",
        "label": "cards",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_struct(Card)2156_storage)"
      },
      {
        "astId": 2192,
        "contract": "contracts/EthGiftCards.sol:EthGiftCards",
        "label": "ens",
        "offset": 0,
        "slot": "16",
        "type": "t_contract(IENS)2124"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)6_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[6]",
        "numberOfBytes": "192"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IENS)2124": {
        "encoding": "inplace",
        "label": "contract IENS",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Card)2156_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EthGiftCards.Card)",
        "numberOfBytes": "32",
        "value": "t_struct(Card)2156_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Card)2156_storage": {
        "encoding": "inplace",
        "label": "struct EthGiftCards.Card",
        "members": [
          {
            "astId": 2145,
            "contract": "contracts/EthGiftCards.sol:EthGiftCards",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2147,
            "contract": "contracts/EthGiftCards.sol:EthGiftCards",
            "label": "theme",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2149,
            "contract": "contracts/EthGiftCards.sol:EthGiftCards",
            "label": "ens",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2153,
            "contract": "contracts/EthGiftCards.sol:EthGiftCards",
            "label": "note",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_string_storage)6_storage"
          },
          {
            "astId": 2155,
            "contract": "contracts/EthGiftCards.sol:EthGiftCards",
            "label": "issuer",
            "offset": 0,
            "slot": "9",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}